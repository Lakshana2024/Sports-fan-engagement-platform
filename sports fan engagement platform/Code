import java.util.*;

class SportsFanEngagementPlatform {

    static class Entity {
        String name;
        int votes;
        String category;

        Entity(String name, String category) {
            this.name = name;
            this.category = category;
            this.votes = 0;
        }

        void addVote() {
            votes++;
        }

        @Override
        public String toString() {
            return name + " (" + category + "): " + votes + " votes";
        }
    }

    private Map<String, Entity> players = new HashMap<>();
    private Map<String, Entity> teams = new HashMap<>();
    private Map<String, Entity> events = new HashMap<>();
    private Map<String, Set<String>> userVotes = new HashMap<>();

    public void addEntity(Map<String, Entity> map, String name, String category) {
        map.putIfAbsent(name, new Entity(name, category));
    }

    public void vote(Map<String, Entity> map, String entityName, String username) {
        Set<String> votedEntities = userVotes.getOrDefault(username, new HashSet<>());
        if (votedEntities.contains(entityName)) {
            System.out.println("You already voted for " + entityName);
            return;
        }
        Entity entity = map.get(entityName);
        if (entity != null) {
            entity.addVote();
            votedEntities.add(entityName);
            userVotes.put(username, votedEntities);
            System.out.println("Vote added for " + entityName);
        } else {
            System.out.println(entityName + " not found.");
        }
    }

    public void displayRankings(Map<String, Entity> map, String type) {
        System.out.println("\n" + type + " Rankings:");
        map.values().stream()
            .sorted((e1, e2) -> Integer.compare(e2.votes, e1.votes))
            .forEach(System.out::println);
    }

    public void displayMostVoted(Map<String, Entity> map, String type) {
        Entity mostVoted = map.values().stream()
            .max(Comparator.comparingInt(e -> e.votes))
            .orElse(null);
        if (mostVoted != null) {
            System.out.println("\nMost Voted " + type + ": " + mostVoted);
        } else {
            System.out.println("No votes yet.");
        }
    }

    public void startTimedPoll(int seconds) {
       long startTime = System.currentTimeMillis();
        Scanner scanner = new Scanner(System.in);
         while (System.currentTimeMillis() - startTime < seconds * 1000) {
            System.out.println("\n1. Vote for Player\n2. Vote for Team\n3. Vote for Event");
            System.out.println("4. Show Player Rankings\n5. Show Team Rankings\n6. Show Event Rankings");
            int choice = scanner.nextInt();
            scanner.nextLine(); 
            if (choice == 1) vote(players, scanner.nextLine(), getUsername(scanner));
            else if (choice == 2) vote(teams, scanner.nextLine(), getUsername(scanner));
            else if (choice == 3) vote(events, scanner.nextLine(), getUsername(scanner));
            else if (choice == 4) displayRankings(players, "Player");
            else if (choice == 5) displayRankings(teams, "Team");
            else if (choice == 6) displayRankings(events, "Event");
            else System.out.println("Invalid option! Try again.");
        }
        System.out.println("Voting time is up!");
    }

    private String getUsername(Scanner scanner) {
        System.out.print("Enter your username: ");
        return scanner.nextLine();
    }

    public void interactivePoll(Scanner scanner) {
        while (true) {
            System.out.println("\n1. Vote for Player\n2. Vote for Team\n3. Vote for Event");
            System.out.println("4. Show Player Rankings\n5. Show Team Rankings\n6. Show Event Rankings");
            System.out.println("7. Show Most Voted Player\n8. Show Most Voted Team\n9. Show Most Voted Event\n10. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();  
            if (choice == 10) {
                System.out.println("Exiting...");
                return;
            }
            if (choice == 1) vote(players, scanner.nextLine(), getUsername(scanner));
            else if (choice == 2) vote(teams, scanner.nextLine(), getUsername(scanner));
            else if (choice == 3) vote(events, scanner.nextLine(), getUsername(scanner));
            else if (choice == 4) displayRankings(players, "Player");
            else if (choice == 5) displayRankings(teams, "Team");
            else if (choice == 6) displayRankings(events, "Event");
            else if (choice == 7) displayMostVoted(players, "Player");
            else if (choice == 8) displayMostVoted(teams, "Team");
            else if (choice == 9) displayMostVoted(events, "Event");
            else System.out.println("Invalid option! Try again.");
        }
    }

    public static void main(String[] args) {
        SportsFanEngagementPlatform platform = new SportsFanEngagementPlatform();
        Scanner scanner = new Scanner(System.in);

        platform.addEntity(platform.players, "Virat Kohli", "Batsman");
        platform.addEntity(platform.players, "MS Dhoni", "Wicketkeeper");
        platform.addEntity(platform.teams, "Mumbai Indians", "IPL Team");
        platform.addEntity(platform.teams, "Chennai Super Kings", "IPL Team");
        platform.addEntity(platform.events, "IPL Final", "Event");

        platform.startTimedPoll(30);
        platform.interactivePoll(scanner);
    }
}
